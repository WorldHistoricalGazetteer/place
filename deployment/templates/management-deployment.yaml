apiVersion: apps/v1
kind: Deployment
metadata:
  name: management-deployment
  namespace: management
  labels:
    app: gazetteer-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gazetteer-management
  template:
    metadata:
      labels:
        app: gazetteer-management
    spec:
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser | default 1001 }}
        runAsGroup: {{ .Values.securityContext.runAsGroup | default 1001 }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        fsGroupChangePolicy: {{ .Values.securityContext.fsGroupChangePolicy | default "Always" }}
      initContainers:
        - name: git-clone
          image: alpine/git:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              git clone https://github.com/WorldHistoricalGazetteer/place /apps/repository || true
          volumeMounts:
            - name: empty-dir-volume
              mountPath: /apps/repository
      containers:
        - name: helm
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          command:
            - "/bin/sh"
            - "-c"
            - |
              echo "ID: $(id)" &&
              echo "Creating a test file in $PV_MOUNT_ROOT/data" &&
              touch $PV_MOUNT_ROOT/data/test-file.txt &&
              ls -la $PV_MOUNT_ROOT/data &&
              echo "Deleting that test file in $PV_MOUNT_ROOT/data" &&
              rm $PV_MOUNT_ROOT/data/test-file.txt &&
              ls -la $PV_MOUNT_ROOT/data &&
              export KUBECONFIG=/root/.kube/config &&
              cd /apps/repository &&
              chmod +x *.sh &&
              python ./deployment/app/api.py
          ports:
            - containerPort: 8000
          volumeMounts:
            - name: kubeconfig-volume
              mountPath: /root/.kube
            - name: empty-dir-volume
              mountPath: /apps/repository
            - name: {{ .Values.nfs.pvc.name }}-volume
              mountPath: {{ .Values.nfs.mountRoot }}
          env:
            - name: PV_MOUNT_ROOT
              value: {{ .Values.nfs.mountRoot }}
          envFrom:
            - secretRef:
                name: github-token
      volumes:
        - name: kubeconfig-volume
          secret:
            secretName: kubeconfig
        - name: empty-dir-volume
          emptyDir:
            sizeLimit: 1Gi
        - name: {{ .Values.nfs.pvc.name }}-volume
          persistentVolumeClaim:
            claimName: {{ .Values.nfs.pvc.name }}
