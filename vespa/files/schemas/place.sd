# The Place model represents geographical entities and their associated metadata. It contains fields for
# toponymic attestation, temporal ranges, and geographical locations, along with metadata from various
# sources. The schema also includes derived geometric fields for spatial queries, such as bounding boxes,
# areas, and representative points. Additionally, the schema supports country codes, feature types,
# and other relevant attributes for efficient querying and filtering of places.

schema place {
    document place {

        field lpf_feature type string {
            # The full JSON of the LPF Feature.
            indexing: summary
        }

        ########### Source Metadata ###########

        field source type string { # TODO: May be redundant, as this is incorporated as the document namespace.
            # Indicates the origin or authority of the record (e.g., a specific gazetteer, database, or contributed dataset).
            indexing: attribute | summary
            attribute: fast-search
        }

        field record_id type string {
            # A unique identifier for the place within the source.
            indexing: attribute | summary
            attribute: fast-search
        }

        field record_url type string {
            # A URL pointing to the source record, preferably an API endpoint.
            indexing: attribute | summary
            attribute: fast-search
        }

        ########### Toponymic Attestations ###########

        struct name {
            field toponym_id type string {
                # The ID of the toponym associated with the place.
            }
            field year_start type int {
                # Start date of the attestation.
            }
            field year_end type int {
                # End date of the attestation.
            }
            field is_preferred type int {
                # 0 or 1: Indicates if this toponym is the preferred one for the place.
                # Boolean type is not supported for indexing in Vespa structs.
            }
        }

        field names type array<name> {
            # List of temporally bounded names for the place.
            indexing: summary
            struct-field toponym_id {
                indexing: attribute | summary
                attribute: fast-search
            }
            struct-field year_start {
                indexing: attribute | summary
                attribute: fast-search
            }
            struct-field year_end {
                indexing: attribute | summary
                attribute: fast-search
            }
            struct-field is_preferred {
                indexing: attribute | summary
                attribute: fast-search
            }
        }

        ########### Temporal Fields ###########
        # Derived from more granular LPF data, they represent the outer bounds of the place's temporal range(s).

        field year_start type int {
            # Start date of the attestation.
            indexing: attribute | summary
            attribute: fast-search
        }

        field year_end type int {
            # End date of the attestation.
            indexing: attribute | summary
            attribute: fast-search
        }

        ########### Other Metadata ###########

        field ccodes type array<string> {
            # ISO 3166-1 alpha-2 country codes for the modern extent of containment.
            # This array allows for efficient filtering of places by their modern geopolitical context, removing the need
            # for complex GIS filtering when country codes form part of a query.
            # Example: ["FR", "DE", "LU"]
            indexing: attribute | summary
            attribute: fast-search
        }

        field types type array<string> {
            # An array of AAT (Getty Art & Architecture Thesaurus) types associated with the place.
            # e.g. ["300008375", "300008347"] (for "cities" and "towns")
            indexing: attribute | summary
            attribute: fast-search
        }

        field classes type array<string> {
            # An array of single-character GeoNames feature classes associated with the place.
            # e.g. ["P", "A"] (for "populated places" and "administrative areas")
            indexing: attribute | summary
            attribute: fast-search
        }

        field meta type string {
            # A JSON string containing additional metadata about the place.
            indexing: summary
        }

        ########### Fields derived from geometries ###########

        struct location {
            field description type string {
                # A description of the location.
            }
            field geometry type string {
                # Geometry in GeoJSON format.
            }
            field year_start type int {
                # Start date of validity for this location.
            }
            field year_end type int {
                # End date of validity for this location.
            }
        }

        field locations type array<location> {
            indexing: summary
            struct-field description {
                indexing: summary
            }
            struct-field geometry {
                indexing: summary
            }
            struct-field year_start {
                indexing: attribute | summary
                attribute: fast-search
            }
            struct-field year_end {
                indexing: attribute | summary
                attribute: fast-search
            }
        }

        field representative_point type position {
          # A single geo-position representing the approximate centre of the place.
          # Calculated using Shapely's representative_point method, and guaranteed to be within the place's combined locations.
          indexing: attribute | summary
        }
        
        field representative_elevation type int {
          # The elevation of the representative point relative to mean sea level in metres.
          # Extracted from the Mapzen Terrarium DEM.
          indexing: attribute | summary
        }

        field area type float {
          # Where relevant, the area of the place's largest location in square metres.
          # Calculated using Shapely's area method.
          indexing: attribute | summary
        }

        field length type float {
          # Where relevant, the length of the place's longest location in metres.
          # Calculated using Shapely's length method.
          indexing: attribute | summary
        }

        field convex_hull type string {
          # Where relevant, the convex hull of the place's combined locations as a GeoJSON string.
          # Calculated using Shapely's convex_hull method.
          indexing: summary
        }

        # Fields representing the bounding box of the place's combined locations and its trans-antimeridial status
        # These are stored as root-level fields to allow range queries.
        field bbox_sw_lat type float {
            indexing: attribute | summary
            attribute: fast-search
        }

        field bbox_sw_lng type float {
            indexing: attribute | summary
            attribute: fast-search
        }

        field bbox_ne_lat type float {
            indexing: attribute | summary
            attribute: fast-search
        }

        field bbox_ne_lng type float {
            indexing: attribute | summary
            attribute: fast-search
        }

        field bbox_antimeridial type bool {
            indexing: attribute
            attribute: fast-search
        }
    }

    field last_modified type long {
        indexing: now | attribute | summary
    }

    fieldset toponyms {
        fields:names
    }

}