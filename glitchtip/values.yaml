# Default values for glitchtip.
image:
  repository: glitchtip/glitchtip
  tag: v4.1.5
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

env:
  normal:
    ENABLE_SOCIAL_AUTH: false
    GLITCHTIP_DOMAIN: https://example.com
    CELERY_WORKER_AUTOSCALE: "1,3"
    CELERY_WORKER_MAX_TASKS_PER_CHILD: "10000"
  secret:
    SECRET_KEY: # Required
    # DATABASE_URL: Specify if using external postgres (not managed by this chart)
    # REDIS_URL: Specify if using external redis (not managed by this chart)

migrationJob:
  enabled: true
  command: ["bin/run-migrate.sh"]
  activeDeadlineSeconds: 900

web:
  replicaCount: 2
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 10
    targetCPU: 80
    # targetMemory: 80
  budget:
    minAvailable: 1
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app.kubernetes.io/component
              operator: In
              values:
              - web  # Change this as needed
          topologyKey: kubernetes.io/hostname
  livenessProbe:
    failureThreshold: 5
    initialDelaySeconds: 5
    timeoutSeconds: 3
  readinessProbe:
    failureThreshold: 10
    initialDelaySeconds: 5
    timeoutSeconds: 2
  service:
    type: ClusterIP
    port: 80

  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

worker:
  enabled: true
  replicaCount: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    targetCPU: 100
    # targetMemory: 100
  livenessProbe:
    initialDelaySeconds: 10
    periodSeconds: 60
    timeoutSeconds: 30
    exec:
      command:
        - "bash"
        - "-c"
        - "celery -A glitchtip inspect ping -d celery@$HOSTNAME | grep -q OK"
  resources:
    limits:
      cpu: 900m
      memory: 768Mi
    requests:
      cpu: 100m
      memory: 350Mi
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  affinity: {}

beat:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 150Mi
    requests:
      cpu: 1m
      memory: 130Mi
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  affinity: {}

flower:
  enabled: false
  image:
    repository: mher/flower
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  affinity: {}
  service:
    type: ClusterIP
    port: 80
  ingress:
    enabled: false
    annotations:
      {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

# For configuration options, see https://artifacthub.io/packages/helm/bitnami/valkey
valkey:
  enabled: true
  architecture: standalone
  # auth:
  #  password: # Set this to avoid remaking valkey on each release
  master:
    persistence:
      enabled: false

# Default to disabled, use a managed database service. But can be enabled here.
# For configuration options, see https://artifacthub.io/packages/helm/bitnami/postgresql
postgresql:
  enabled: false
  # auth:
  #   postgresPassword: # Must be set
