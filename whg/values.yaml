subdomain: "place.whgazetteer.org"
namespace: "whg"

whgAffinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: whg-site
              operator: In
              values:
                - "true"

whgDevAffinity:
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
      - matchExpressions:
        - key: environment
          operator: In
          values:
            - development
        - key: whg-site
          operator: In
          values:
            - "true"

# Django configuration
django:
  replicaCount: 1
  image: "worldhistoricalgazetteer/web"
  imageTag: "0.1.7"
  imagePullPolicy: "IfNotPresent"
  githubRepository: "WorldHistoricalGazetteer/whg3"
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
  resources:
    requests:
      memory: "1Gi"
      cpu: "1"
    limits:
      memory: "2Gi"
      cpu: "2"
  workers: 8
  port: 8000
  servicePort: 443
  env:
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: whg-secret
          key: db-password
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: whg-secret
          key: database-url
    - name: SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: whg-secret
          key: secret-key
  probes:
    startup:
      initialDelaySeconds: 45
      timeoutSeconds: 10
  volumeMounts:
    - name: app
      mountPath: /app
    - name: static-files
      mountPath: /app/static
    - name: media-files
      mountPath: /app/media
  volumes:
    - name: app
      persistentVolumeClaim:
        claimName: django-app-pvc
    - name: static-files
      persistentVolumeClaim:
        claimName: django-static-pvc
    - name: media-files
      persistentVolumeClaim:
        claimName: django-media-pvc
    - name: secret-volume
      secret:
        secretName: whg-secret
        items:
          - key: local_settings
            path: local_settings.py
          - key: env_template
            path: env_template.py
          - key: ca_cert
            path: ca-cert.pem
  pv:
    app:
      storage: 10Gi
      path: /data/k8s/django-app
    static:
      storage: 2Gi
      path: /data/k8s/django-static
    media:
      storage: 10Gi
      path: /data/k8s/django-media

# Webpack configuration
webpack:
  replicaCount: 1
  port: 4000
  pv:
    storage: 1Gi
    path: /data/k8s/webpack

# Redis configuration
redis:
  replicaCount: 1
  image: "redis"
  imageTag: "bookworm"
  imagePullPolicy: "IfNotPresent"
  port: 6379
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  pv:
    storage: 1Gi
    path: /data/k8s/redis

# Celery configuration
celery:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
  worker:
    replicaCount: 1
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "2Gi"
        cpu: "500m"
  beat:
    replicaCount: 1
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "256Mi"
        cpu: "500m"
  flower:
    replicaCount: 1
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "256Mi"
        cpu: "500m"

# Postgres & pgBackRest configuration (see also various `.conf` files)
postgres:
  replicaCount: 1
  image: "worldhistoricalgazetteer/postgis-pgbackrest"
  imageTag: "15-3.4"
  cronImage: "bitnami/kubectl"
  cronImageTag: "1.32.0"
  imagePullPolicy: "IfNotPresent"
  user: 999
  group: 999
  port: 5432
  dbUser: "whgadmin"
  dbName: "whgv3beta"
  fullBackupSchedule: "0 5 * * *"  # Every day at 5:00 AM
  pv:
    postgres:
      storage: 10Gi
      path: /data/k8s/postgres
    pgbackrest:
      storage: 10Gi
      path: /data/k8s/pgbackrest